import { Telegraf, Markup } from 'telegraf';
import { message } from 'telegraf/filters';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

const sites = ['mdmprint.ru', 'copy.ru', '1-tm.ru', 'litera.studio', 'vea.ru', 'sequoiapay.io'];

const siteTests: Record<string, string[]> = {
    'mdmprint.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ö–∞—Ç–∞–ª–æ–≥', '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', '–ü–æ–∏—Å–∫'],
    'copy.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ö–∞—Ç–∞–ª–æ–≥', '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', '–ü–æ–∏—Å–∫'],
    '1-tm.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', '–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ü–æ–∏—Å–∫'],
    'litera.studio': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É', '–ü–æ–∏—Å–∫'],
    'vea.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ú–µ–Ω—é —É—Å–ª—É–≥', '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É'],
    'sequoiapay.io': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞'],
};

const grepMap: Record<string, string> = {
    'mdmprint.ru:–ì–ª–∞–≤–Ω–∞—è': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'mdmprint.ru:–ö–∞—Ç–∞–ª–æ–≥': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
    'mdmprint.ru:–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
    'mdmprint.ru:–ü–æ–∏—Å–∫': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'mdmprint.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'copy.ru:–ì–ª–∞–≤–Ω–∞—è': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'copy.ru:–ö–∞—Ç–∞–ª–æ–≥': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
    'copy.ru:–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
    'copy.ru:–ü–æ–∏—Å–∫': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'copy.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    '1-tm.ru:–ì–ª–∞–≤–Ω–∞—è': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    '1-tm.ru:–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
    '1-tm.ru:–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"',
    '1-tm.ru:–ü–æ–∏—Å–∫': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    '1-tm.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'litera.studio:–ì–ª–∞–≤–Ω–∞—è': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'litera.studio:–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
    'litera.studio:–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',
    'litera.studio:–ü–æ–∏—Å–∫': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'litera.studio:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'vea.ru:–ì–ª–∞–≤–Ω–∞—è': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'vea.ru:–ú–µ–Ω—é —É—Å–ª—É–≥': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é —É—Å–ª—É–≥',
    'vea.ru:–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',
    'vea.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'sequoiapay.io:–ì–ª–∞–≤–Ω–∞—è': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'sequoiapay.io:–°–º–µ–Ω–∞ —è–∑—ã–∫–∞': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞',
    'sequoiapay.io:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
};

let userState: Record<
    number,
    {
        currentSite?: string;
        runningTest?: string;
        runId?: number;
        isCheckAllRunning?: boolean;
        waitingMessage?: {
            chatId: number;
            messageId: number;
        };
    }
> = {};

// –§—É–Ω–∫—Ü–∏–∏
// –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function mainMenuMarkup() {
    return Markup.inlineKeyboard([
        [Markup.button.callback('üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã', 'check_all')],
        [Markup.button.callback('üìÅ –í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç', 'choose_site')],
    ]);
}

// –ó–∞–ø—É—Å–∫ workflow
async function startWorkflow(grep: string = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤') {
    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/workflows/${process.env.GITHUB_WORKFLOW}/dispatches`,
            // `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/runs?event=workflow_dispatch`,
            {
                method: 'POST',
                // method: 'GET',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({ ref: process.env.GITHUB_REF, inputs: { grep } }),
            }
        );

        if (!res.ok) {
            return `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${await res.text()}`;
        }
    } catch (err: any) {
        return `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ${err.message}`;
    }
}

// –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.start((ctx) => {
    userState[ctx.from.id] = {};
    ctx.reply('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å:', mainMenuMarkup());
});

// –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
bot.action('back_main', async (ctx) => {
    userState[ctx.from.id] = {};
    await ctx.editMessageText('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å:', mainMenuMarkup());
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
bot.action('check_all', async (ctx) => {
    await ctx.answerCbQuery();

    if (userState[ctx.from.id]?.isCheckAllRunning) return;

    userState[ctx.from.id] = { isCheckAllRunning: true };

    const result = await startWorkflow();

    if (result) {
        userState[ctx.from.id].isCheckAllRunning = false;
        await ctx.reply(result);
    } else {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        await ctx.editMessageReplyMarkup(null);
        await new Promise((res) => setTimeout(res, 300));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ–∂–∏–¥–∞–Ω–∏–µ" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º messageId
        await ctx.editMessageText(
            '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è',
            Markup.inlineKeyboard([[Markup.button.callback('‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...', 'noop')]])
        );
    }
});

// –í—ã–±–æ—Ä —Å–∞–π—Ç–∞
bot.action('choose_site', async (ctx) => {
    userState[ctx.from.id] = {};
    const siteButtons = sites.map((site) => [Markup.button.callback(site, `site:${site}`)]);
    siteButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_main')]);
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç:', Markup.inlineKeyboard(siteButtons));
});

// –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–∞–π—Ç–∞
bot.action(/^site:(.+)$/, async (ctx) => {
    const site = ctx.match[1];
    userState[ctx.from.id] = { currentSite: site };

    const testButtons = siteTests[site].map((test) => [Markup.button.callback(test, `test:${site}:${test}`)]);
    testButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'choose_site')]);

    await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è ${site}:`, Markup.inlineKeyboard(testButtons));
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
bot.action(/^test:(.+):(.+)$/, async (ctx) => {
    const site = ctx.match[1];
    const test = ctx.match[2];
    const grep = grepMap[`${site}:${test}`];
    if (!grep) return ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç.');

    const user = userState[ctx.from.id];
    if (user.runningTest === test) return ctx.answerCbQuery('‚è≥ –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');

    user.runningTest = test;

    const originalKeyboard = (ctx.callbackQuery.message as any).reply_markup?.inline_keyboard;
    const updatedKeyboard = originalKeyboard?.map((row: any[]) =>
        row.map((btn: any) =>
            btn.text === test ? Markup.button.callback('‚è≥ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û—Ç–º–µ–Ω–∏—Ç—å?', 'cancelRun') : btn
        )
    );

    await ctx.editMessageReplyMarkup({ inline_keyboard: updatedKeyboard });
});

// –û—Ç–º–µ–Ω–∞ workflow
bot.action('cancelRun', async (ctx) => {
    const runId = ctx.match[1];

    await ctx.answerCbQuery(); // —Å–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"

    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/runs/${runId}/cancel`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
            }
        );

        if (res.ok) {
            await ctx.editMessageText('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
        } else {
            await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—É—Å–∫. –°—Ç–∞—Ç—É—Å: ${res.status}`);
        }
    } catch (err: any) {
        await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: ${err.message}`);
    }
});

// –°–ª—É—à–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã workflow
// bot.on(message('text'), async (ctx) => {
//     console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);
//     try {
//         const text = ctx.message.text;
//         if (!text) {
//             return ctx.reply('‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
//         }

//         // –ò—â–µ–º Run ID (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω, –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
//         const match = text.match(/Run\s*ID:\s*(\d+)/i);
//         if (!match) {
//             return ctx.reply(
//                 '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Run ID –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Run ID: <—á–∏—Å–ª–æ>".'
//             );
//         } else {
//             console.log('–ù–∞–π–¥–µ–Ω Run ID:', match[1]);
//         }

//         const runId = match[1];
//         if (!runId) {
//             return ctx.reply('‚ùå Run ID –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.');
//         }

//         const userId = ctx.from.id;
//         const msgInfo = userState[userId]?.waitingMessage;
//         console.log('waitingMessage:', msgInfo);

//         if (!msgInfo) {
//             return ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.');
//         }

//         // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
//         try {
//             await bot.telegram.editMessageText(
//                 msgInfo.chatId,
//                 msgInfo.messageId,
//                 undefined,
//                 '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.',
//                 Markup.inlineKeyboard([Markup.button.callback('‚õî –û—Ç–º–µ–Ω–∏—Ç—å?', `cancel_${runId}`)])
//             );
//             console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ');
//         } catch (err) {
//             console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
//             await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
//         }

//         userState[userId].runId = Number(runId);
//         userState[userId].isCheckAllRunning = false;
//         await ctx.reply('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.');
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
//         await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
//     }
// });

bot.launch();
