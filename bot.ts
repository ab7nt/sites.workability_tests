import { Telegraf, Markup } from 'telegraf';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
bot.start((ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üåê –í—Å–µ —Å–∞–π—Ç—ã', 'run_all')],
            [Markup.button.callback('üîπ mdmprint.ru', 'run_mdm')],
            [Markup.button.callback('üî∏ copy.ru', 'run_copy')],
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
bot.action(/run_(.+)/, async (ctx) => {
    const site = ctx.match[1]; // all, mdm, copy

    const grepMap: Record<string, string> = {
        all: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤',
        mdm: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ mdmprint.ru',
        copy: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ copy.ru',
    };

    const grep = grepMap[site];

    ctx.answerCbQuery(); // —Å–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏"
    ctx.reply(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –¥–ª—è: ${grep}`);

    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/workflows/${process.env.GITHUB_WORKFLOW}/dispatches`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({
                    ref: process.env.GITHUB_REF,
                    inputs: {
                        grep,
                    },
                }),
            }
        );

        if (res.ok) {
            ctx.reply('‚úÖ –¢–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!');
        } else {
            const err = await res.text();
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err}`);
        }
    } catch (err) {
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ' + (err as Error).message);
    }
});

bot.launch();
