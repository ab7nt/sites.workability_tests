import { Telegraf, Markup } from 'telegraf';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
bot.start((ctx) => {
    ctx.reply(
        '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã', 'run_all')],
            [Markup.button.callback('üìÅ –í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç', 'choose_site')],
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã"
bot.action('run_all', async (ctx) => {
    ctx.answerCbQuery();
    ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤');

    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/workflows/${process.env.GITHUB_WORKFLOW}/dispatches`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({
                    ref: process.env.GITHUB_REF,
                    inputs: {
                        grep: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤',
                    },
                }),
            }
        );

        if (res.ok) {
            ctx.reply('‚úÖ –¢–µ—Å—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!');
        } else {
            const err = await res.text();
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err}`);
        }
    } catch (err) {
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ' + (err as Error).message);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç"
bot.action('choose_site', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç:',
        Markup.inlineKeyboard([
            [Markup.button.callback('mdmprint.ru', 'site_mdm')],
            [Markup.button.callback('copy.ru', 'site_copy')],
            [Markup.button.callback('1-tm.ru', 'site_1tm')],
            [Markup.button.callback('litera.studio', 'site_litera')],
            [Markup.button.callback('vea.ru', 'site_vea')],
            [Markup.button.callback('sequoiapay.io', 'site_sequoia')],
        ])
    );
});

bot.action('site_mdm', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è mdmprint.ru:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_mdm_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_mdm_main')],
            [Markup.button.callback('–ö–∞—Ç–∞–ª–æ–≥', 'run_mdm_catalog')],
            [Markup.button.callback('–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', 'run_mdm_order')],
            [Markup.button.callback('–ü–æ–∏—Å–∫', 'run_mdm_search')],
        ])
    );
});

bot.action('site_copy', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è copy.ru:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_copy_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_copy_main')],
            [Markup.button.callback('–ö–∞—Ç–∞–ª–æ–≥', 'run_copy_catalog')],
            [Markup.button.callback('–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', 'run_copy_order')],
            [Markup.button.callback('–ü–æ–∏—Å–∫', 'run_copy_search')],
        ])
    );
});

bot.action('site_1tm', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è 1-tm.ru:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_1tm_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_1tm_main')],
            [Markup.button.callback('–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', 'run_1tm_catalog')],
            [Markup.button.callback('–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', 'run_1tm_order')],
            [Markup.button.callback('–ü–æ–∏—Å–∫', 'run_1tm_search')],
        ])
    );
});

bot.action('site_litera', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è litera.studio:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_litera_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_litera_main')],
            [Markup.button.callback('–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', 'run_litera_catalog')],
            [Markup.button.callback('–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É', 'run_litera_order')],
            [Markup.button.callback('–ü–æ–∏—Å–∫', 'run_litera_search')],
        ])
    );
});

bot.action('site_vea', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è vea.ru:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_vea_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_vea_main')],
            [Markup.button.callback('–ú–µ–Ω—é —É—Å–ª—É–≥', 'run_vea_catalog')],
            [Markup.button.callback('–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É', 'run_vea_order')],
        ])
    );
});

bot.action('site_sequoia', (ctx) => {
    ctx.answerCbQuery();
    ctx.reply(
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è sequoiapay.io:',
        Markup.inlineKeyboard([
            [Markup.button.callback('–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', 'run_sequoia_all')],
            [Markup.button.callback('–ì–ª–∞–≤–Ω–∞—è', 'run_sequoia_main')],
            [Markup.button.callback('–°–º–µ–Ω–∞ —è–∑—ã–∫–∞', 'run_sequoia_lang')],
        ])
    );
});

bot.action(/run_(.+)/, async (ctx) => {
    const grepMap: Record<string, string> = {
        mdm_all: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        mdm_main: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        mdm_catalog: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
        mdm_order: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
        mdm_search: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',

        copy_all: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        copy_main: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        copy_catalog: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
        copy_order: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
        copy_search: 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',

        '1tm_all': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        '1tm_main': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        '1tm_catalog': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
        '1tm_order': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"',
        '1tm_search': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',

        litera_all: 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        litera_main: 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        litera_catalog: 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
        litera_order: 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',
        litera_search: 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',

        vea_all: 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        vea_main: 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        vea_catalog: 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é —É—Å–ª—É–≥',
        vea_order: 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',

        sequoia_all: 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
        sequoia_main: 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        sequoia_lang: 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞',
    };

    const grepKey = ctx.match[1];
    const grep = grepMap[grepKey];

    if (!grep) {
        ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç.');
        return;
    }

    ctx.answerCbQuery();
    ctx.reply(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç: ${grep}`);

    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/workflows/${process.env.GITHUB_WORKFLOW}/dispatches`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({
                    ref: process.env.GITHUB_REF,
                    inputs: {
                        grep,
                    },
                }),
            }
        );

        if (res.ok) {
            ctx.reply('‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω!');
        } else {
            const err = await res.text();
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err}`);
        }
    } catch (err) {
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ' + (err as Error).message);
    }
});

bot.launch();
