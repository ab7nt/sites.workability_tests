import { Telegraf, Markup } from 'telegraf';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const {
    BOT_TOKEN,
    GITHUB_TOKEN,
    GITHUB_REPO,
    GITHUB_WORKFLOW,
    GITHUB_REF = 'main', // fallback –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ
} = process.env;

if (!BOT_TOKEN || !GITHUB_TOKEN || !GITHUB_REPO || !GITHUB_WORKFLOW) {
    throw new Error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const bot = new Telegraf(BOT_TOKEN);

// –ö–Ω–æ–ø–æ—á–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
bot.start((ctx) => {
    ctx.reply(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üåê –í—Å–µ —Å–∞–π—Ç—ã', 'run_all')],
            [Markup.button.callback('üîπ mdmprint.ru', 'run_mdm')],
            [Markup.button.callback('üî∏ copy.ru', 'run_copy')],
        ])
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action(/run_(.+)/, async (ctx) => {
    const site = ctx.match[1] as 'all' | 'mdm' | 'sequoiapay';

    const grepMap = {
        all: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤',
        mdm: 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        sequoiapay: 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
    } as const;

    const grep = grepMap[site];
    if (!grep) {
        ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä grep');
        return;
    }

    await ctx.answerCbQuery(); // —Å–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"
    ctx.reply(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –¥–ª—è: ${grep}`);

    try {
        const res = await fetch(
            `https://api.github.com/repos/${GITHUB_REPO}/actions/workflows/${GITHUB_WORKFLOW}/dispatches`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({
                    ref: GITHUB_REF,
                    inputs: { grep },
                }),
            }
        );

        if (res.ok) {
            ctx.reply('‚úÖ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!');
        } else {
            const errorText = await res.text();
            ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:\n${errorText}`);
        }
    } catch (err) {
        ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ${(err as Error).message}`);
    }
});

bot.launch();
