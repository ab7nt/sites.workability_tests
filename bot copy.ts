import { Telegraf, Markup } from 'telegraf';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN!);

const sites = ['mdmprint.ru', 'copy.ru', '1-tm.ru', 'litera.studio', 'vea.ru', 'sequoiapay.io'];

const siteTests: Record<string, string[]> = {
    'mdmprint.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ö–∞—Ç–∞–ª–æ–≥', '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', '–ü–æ–∏—Å–∫'],
    'copy.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ö–∞—Ç–∞–ª–æ–≥', '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑', '–ü–æ–∏—Å–∫'],
    '1-tm.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', '–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ü–æ–∏—Å–∫'],
    'litera.studio': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é', '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É', '–ü–æ–∏—Å–∫'],
    'vea.ru': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–ú–µ–Ω—é —É—Å–ª—É–≥', '–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É'],
    'sequoiapay.io': ['–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞', '–ì–ª–∞–≤–Ω–∞—è', '–°–º–µ–Ω–∞ —è–∑—ã–∫–∞'],
};

const grepMap: Record<string, string> = {
    'mdmprint.ru:–ì–ª–∞–≤–Ω–∞—è': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'mdmprint.ru:–ö–∞—Ç–∞–ª–æ–≥': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
    'mdmprint.ru:–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
    'mdmprint.ru:–ü–æ–∏—Å–∫': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'mdmprint.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'mdmprint.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'copy.ru:–ì–ª–∞–≤–Ω–∞—è': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'copy.ru:–ö–∞—Ç–∞–ª–æ–≥': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞',
    'copy.ru:–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"',
    'copy.ru:–ü–æ–∏—Å–∫': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'copy.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'copy.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    '1-tm.ru:–ì–ª–∞–≤–Ω–∞—è': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    '1-tm.ru:–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
    '1-tm.ru:–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"',
    '1-tm.ru:–ü–æ–∏—Å–∫': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    '1-tm.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': '1-tm.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'litera.studio:–ì–ª–∞–≤–Ω–∞—è': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'litera.studio:–ë—É—Ä–≥–µ—Ä-–º–µ–Ω—é': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é',
    'litera.studio:–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',
    'litera.studio:–ü–æ–∏—Å–∫': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞',
    'litera.studio:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'litera.studio - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'vea.ru:–ì–ª–∞–≤–Ω–∞—è': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'vea.ru:–ú–µ–Ω—é —É—Å–ª—É–≥': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–Ω—é —É—Å–ª—É–≥',
    'vea.ru:–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø-–∞–ø–∞ "–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É"',
    'vea.ru:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'vea.ru - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',

    'sequoiapay.io:–ì–ª–∞–≤–Ω–∞—è': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    'sequoiapay.io:–°–º–µ–Ω–∞ —è–∑—ã–∫–∞': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞',
    'sequoiapay.io:–í—Å–µ —Ç–µ—Å—Ç—ã —Å–∞–π—Ç–∞': 'sequoiapay.io - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞',
};

let userState: Record<number, { currentSite?: string; runningTest?: string; runId?: number }> = {};

bot.start((ctx) => {
    userState[ctx.from.id] = {};
    ctx.reply(
        '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã', 'check_all')],
            [Markup.button.callback('üìÅ –í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç', 'choose_site')],
        ])
    );
});

bot.action('choose_site', async (ctx) => {
    userState[ctx.from.id] = {};
    const siteButtons = sites.map((site) => [Markup.button.callback(site, `site:${site}`)]);
    siteButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back_main')]);
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç:', Markup.inlineKeyboard(siteButtons));
});

bot.action('back_main', async (ctx) => {
    userState[ctx.from.id] = {};
    await ctx.editMessageText(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.inlineKeyboard([
            [Markup.button.callback('üåê –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∞–π—Ç—ã', 'check_all')],
            [Markup.button.callback('üìÅ –í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç', 'choose_site')],
        ])
    );
});

bot.action(/^site:(.+)$/, async (ctx) => {
    const site = ctx.match[1];
    userState[ctx.from.id] = { currentSite: site };

    const testButtons = siteTests[site].map((test) => [Markup.button.callback(test, `test:${site}:${test}`)]);
    testButtons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'choose_site')]);

    await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è ${site}:`, Markup.inlineKeyboard(testButtons));
});

bot.action(/^test:(.+):(.+)$/, async (ctx) => {
    const site = ctx.match[1];
    const test = ctx.match[2];
    const grep = grepMap[`${site}:${test}`];
    if (!grep) return ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç.');

    const user = userState[ctx.from.id];
    if (user.runningTest === test) return ctx.answerCbQuery('‚è≥ –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');

    user.runningTest = test;

    const originalKeyboard = (ctx.callbackQuery.message as any).reply_markup?.inline_keyboard;
    const updatedKeyboard = originalKeyboard?.map((row: any[]) =>
        row.map((btn: any) =>
            btn.text === test ? Markup.button.callback('‚è≥ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –û—Ç–º–µ–Ω–∏—Ç—å?', 'cancel') : btn
        )
    );

    await ctx.editMessageReplyMarkup({ inline_keyboard: updatedKeyboard });

    try {
        const res = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/workflows/${process.env.GITHUB_WORKFLOW}/dispatches`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
                body: JSON.stringify({ ref: process.env.GITHUB_REF, inputs: { grep } }),
            }
        );

        if (!res.ok) {
            user.runningTest = undefined;
            return ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${await res.text()}`);
        }

        const runsRes = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/runs?event=workflow_dispatch`,
            {
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
            }
        );

        const runsData = await runsRes.json();

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ run'—ã –Ω–∞ –Ω—É–∂–Ω–æ–π –≤–µ—Ç–∫–µ
        const activeRuns = runsData.workflow_runs
            .filter(
                (r: any) =>
                    r.head_branch === process.env.GITHUB_REF && (r.status === 'in_progress' || r.status === 'queued')
            )
            .sort((a: any, b: any) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());

        const latestRun = activeRuns[0];
        user.runId = latestRun?.id;

        ctx.reply('‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω!');
    } catch (err: any) {
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: ' + err.message);
    }
});

bot.action('cancel', async (ctx) => {
    const user = userState[ctx.from.id];
    if (!user?.runId) return ctx.answerCbQuery('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.');

    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å run
        const cancelRes = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/runs/${user.runId}/cancel`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
            }
        );

        if (cancelRes.ok) {
            user.runId = undefined;
            user.runningTest = undefined;
            return ctx.editMessageText(
                '‚õî –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.',
                Markup.inlineKeyboard([[Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `site:${user.currentSite}`)]])
            );
        }

        // –ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusRes = await fetch(
            `https://api.github.com/repos/${process.env.GITHUB_REPO}/actions/runs/${user.runId}`,
            {
                headers: {
                    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json',
                },
            }
        );

        const statusData = await statusRes.json();
        const { id, status, conclusion } = statusData;

        user.runId = undefined;
        user.runningTest = undefined;

        if (status === 'completed') {
            return ctx.reply(
                `‚ö†Ô∏è –¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${conclusion ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nrunId: ${id ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`
            );
        }

        const errorText = await cancelRes.text();
        return ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç: ${errorText}`);
    } catch (err: any) {
        ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ' + err.message);
    }
});

bot.launch();
