# Test info

- Name: Проверка работоспособности сайтов >> copy.ru - Проверка сайта >> copy.ru - Проверка поиска
- Location: /__w/sites.workability_tests/sites.workability_tests/tests/sitesWorkabilityCheking.spec.ts:35:9

# Error details

```
Error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received:   0
    at /__w/sites.workability_tests/sites.workability_tests/PageObjects/BasePage.ts:454:79
    at CopyRuMainPage.checkingSearch (/__w/sites.workability_tests/sites.workability_tests/PageObjects/BasePage.ts:449:9)
    at /__w/sites.workability_tests/sites.workability_tests/tests/sitesWorkabilityCheking.spec.ts:36:13
```

# Test source

```ts
  354 |
  355 |             finalScreenshots.push({
  356 |                 name: screenshotName,
  357 |                 content: screenshot,
  358 |                 timestamp: new Date(Date.now() + 3 * 3600 * 1000).toLocaleString('ru-RU', {
  359 |                     day: '2-digit',
  360 |                     month: '2-digit',
  361 |                     year: 'numeric',
  362 |                     hour: '2-digit',
  363 |                     minute: '2-digit',
  364 |                     second: '2-digit',
  365 |                     hour12: false,
  366 |                 }),
  367 |             });
  368 |         });
  369 |     }
  370 |
  371 |     // Скролл страницы для нормализации загрузки
  372 |     async scrollToEndOfThePage(): Promise<void> {
  373 |         await test.step('Скролл страницы для нормализации загрузки', async () => {
  374 |             await this.page.evaluate(() => {
  375 |                 if (!document.body) throw new Error('document.body is not available on this page.');
  376 |                 window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
  377 |             });
  378 |             await this.page.waitForTimeout(1000);
  379 |
  380 |             await this.page.evaluate(() => {
  381 |                 if (!document.body) throw new Error('document.body is not available on this page.');
  382 |                 window.scrollTo({ top: 0, behavior: 'smooth' });
  383 |             });
  384 |             await this.page.waitForTimeout(1000);
  385 |         });
  386 |     }
  387 |
  388 |     // Основная функция для проверки работоспособности страницы
  389 |     async generalWorkabilityChecking(): Promise<void> {
  390 |         await test.step('Общие проверки', async () => {
  391 |             try {
  392 |                 await this.open();
  393 |                 await this.checkingTheVisibilityOfElements();
  394 |                 await this.scrollToEndOfThePage();
  395 |                 await this.takeAScreenshotForReport('Главная страница', { fullPage: true });
  396 |             } catch (error) {
  397 |                 console.error('Ошибка при выполнении общих проверок:', error);
  398 |             }
  399 |         });
  400 |     }
  401 |
  402 |     // Проверка страницы результатов поиска
  403 |     async checkSearchResultsPage(): Promise<void> {
  404 |         await test.step('Проверка страницы результатов поиска', async () => {
  405 |             await Promise.all([this.page.waitForLoadState('load'), this.searchInputButton[this.site].click()]);
  406 |
  407 |             await this.scrollToEndOfThePage();
  408 |             await this.takeAScreenshotForReport('Страница результатов поиска', { fullPage: true });
  409 |         });
  410 |     }
  411 |
  412 |     // Метод для проверки поиска
  413 |     async checkingSearch(): Promise<void> {
  414 |         // Случайное слово для поиска
  415 |         const word = helpers.getRandomSearchWord(this.site);
  416 |
  417 |         await test.step('Ввод текста в поле поиска', async () => {
  418 |             // Ожидание загрузки основного скрипта
  419 |             if (this.site === 'mdmprint') {
  420 |                 await this.page.waitForResponse((resp) => resp.url().includes('main.js') && resp.status() === 200);
  421 |                 await this.page.waitForTimeout(1000);
  422 |             }
  423 |
  424 |             // Открытие поля поиска (если требуется)
  425 |             if (this.isMobile) {
  426 |                 if (this.site !== 'onetm') {
  427 |                     await this.searchButtonMobile[this.site].click();
  428 |                 }
  429 |                 if (this.site === 'onetm') {
  430 |                     await this.burgerMenuButton[this.site].click();
  431 |                 }
  432 |             } else {
  433 |                 const sitesRequiringClick = new Set(['litera', 'onetm']);
  434 |                 if (sitesRequiringClick.has(this.site)) {
  435 |                     await this.headerSearchButton[this.site].click();
  436 |                 }
  437 |             }
  438 |
  439 |             // Ввод текста в поле поиска
  440 |             if (this.isMobile) {
  441 |                 await this.searchInputMobile[this.site].fill(word);
  442 |                 await expect(this.searchInputMobile[this.site]).toHaveValue(word);
  443 |             } else {
  444 |                 await this.searchInput[this.site].pressSequentially(word, { delay: 100 });
  445 |                 await expect(this.searchInput[this.site]).toHaveValue(word);
  446 |             }
  447 |         });
  448 |
  449 |         await test.step('Проверка выпадающего списка результатов поиска', async () => {
  450 |             // Проверка наличия выпадающего списка результатов поиска
  451 |             if (this.isMobile) {
  452 |                 await this.searchResultDropdownMobile[this.site].waitFor({ state: 'visible' });
  453 |                 await this.page.waitForTimeout(1000); // Пропуск анимации
> 454 |                 expect(await this.searchResultItemsMobile[this.site].count()).toBeGreaterThan(0);
      |                                                                               ^ Error: expect(received).toBeGreaterThan(expected)
  455 |             } else {
  456 |                 await this.searchResultDropdown[this.site].waitFor({ state: 'visible' });
  457 |                 expect(await this.searchResultItems[this.site].count()).toBeGreaterThan(0);
  458 |             }
  459 |
  460 |             // Наведенеие на случайный элемент из выпадающего списка (только для десктопа)
  461 |             if (!this.isMobile) {
  462 |                 const resultItems = await this.searchResultItems[this.site].all();
  463 |                 let randomIndex = Math.floor(Math.random() * resultItems.length);
  464 |                 const randomResultItem = resultItems[randomIndex];
  465 |                 await randomResultItem.hover();
  466 |             } else {
  467 |                 return;
  468 |             }
  469 |
  470 |             await this.scrollToEndOfThePage();
  471 |             await this.takeAScreenshotForReport('Дропдаун результатов поиска');
  472 |         });
  473 |
  474 |         await test.step('Проверка страницы результатов поиска', async () => {
  475 |             // Нажатие на кнопку "Поиск" или "Enter"
  476 |             if (this.isMobile) {
  477 |                 // Enter в поле поиска
  478 |                 if (this.site === 'mdmprint' || this.site === 'copy') {
  479 |                     await this.searchInputMobile[this.site].press('Enter');
  480 |                 } else {
  481 |                     // Клик по кнопке "Поиск"
  482 |                     await this.searchInputButtonMobile[this.site].click();
  483 |                 }
  484 |             } else {
  485 |                 await this.searchInputButton[this.site].click();
  486 |             }
  487 |
  488 |             await this.page.waitForLoadState('domcontentloaded');
  489 |
  490 |             // Дождаться нужного URL (или падение через timeout)
  491 |             await expect.poll(() => this.page.url(), { timeout: 10000 }).toContain('?s=');
  492 |
  493 |             // await this.scrollToEndOfThePage();
  494 |             await this.takeAScreenshotForReport('Страница результатов поиска', { fullPage: true });
  495 |         });
  496 |     }
  497 |
  498 |     // Метод для проверки меню каталога
  499 |     async catalogChecking(): Promise<void> {
  500 |         await test.step('Открытие меню каталога', async () => {
  501 |             if (this.isMobile) {
  502 |                 if (this.site === 'copy') {
  503 |                     // Клик по кнопке "Каталог" в нижнем тап-меню (адаптив)
  504 |                     await this.bottomTabMenuCatalogTab['inactive'].click();
  505 |                 } else if (this.site === 'onetm' || this.site === 'litera' || this.site === 'vea') {
  506 |                     // Клик по бургер-меню (адаптив)
  507 |                     await this.burgerMenuButton[this.site].click();
  508 |                 } else {
  509 |                     // Открытие бургер-меню и затем каталога (адаптив)
  510 |                     await this.burgerMenuButton[this.site].click();
  511 |                     await this.catalogButtonMobile[this.site].click();
  512 |                 }
  513 |             } else {
  514 |                 // Наведение или клик, в зависимости от сайта (десктоп)
  515 |                 if (this.site === 'litera') {
  516 |                     await this.catalogButton[this.site].hover();
  517 |                 } else {
  518 |                     await this.catalogButton[this.site].click();
  519 |                 }
  520 |             }
  521 |
  522 |             // Ожидание отображения каталога
  523 |             const catalogSelector: Locator = this.isMobile
  524 |                 ? this.catalogMobile[this.site]
  525 |                 : this.catalogLeftSide[this.site];
  526 |             await catalogSelector.waitFor({ state: 'visible' });
  527 |         });
  528 |
  529 |         await test.step('Раскрытие случайной категории в меню каталога', async () => {
  530 |             if (this.site === 'vea' || this.site === 'litera') {
  531 |                 await this.page.waitForTimeout(1000); // Пропуск анимации
  532 |                 await this.takeAScreenshotForReport('Каталог');
  533 |                 return;
  534 |             }
  535 |
  536 |             const categories = await (this.isMobile
  537 |                 ? this.categoriesItemsMobile[this.site]
  538 |                 : this.categoriesItems[this.site]
  539 |             ).all();
  540 |
  541 |             const randomIndex = Math.floor(Math.random() * categories.length);
  542 |             const randomCategory = categories[randomIndex];
  543 |
  544 |             // На мобильном — всегда клик
  545 |             if (this.isMobile) {
  546 |                 await randomCategory.click();
  547 |             } else {
  548 |                 if (this.site === 'mdmprint') {
  549 |                     await randomCategory.click();
  550 |                 }
  551 |                 await randomCategory.hover();
  552 |             }
  553 |
  554 |             await this.page.waitForTimeout(2000); // Пропуск анимации
```