name: Sites workability checking with Allure report on GitHub Pages

on:
    schedule:
        - cron: '0 6 * * *'
    workflow_dispatch:
        inputs:
            grep:
                description: 'Grep pattern for Playwright tests'
                required: false
                default: 'Проверка работоспособности сайтов'

jobs:
    check_sites_workability:
        runs-on: ubuntu-latest
        container:
            image: mcr.microsoft.com/playwright:v1.53.0-noble

        env:
            TZ: Europe/Moscow

        steps:
            - name: Initialize variables
              run: |
                  echo "job_status=Успешно" >> $GITHUB_ENV
                  echo "job_emoji=✅" >> $GITHUB_ENV
                  echo "tests_exit_code=0" >> $GITHUB_ENV
                  echo "job_exit_code=0" >> $GITHUB_ENV
                  echo "REPORT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
                  echo "REPO_NAME=$(echo '${{ github.repository }}' | cut -d/ -f2)" >> $GITHUB_ENV

            - name: Notify about workflow start
              run: |
                  GREP="${{ github.event.inputs.grep }}"
                  [ -z "$GREP" ] && GREP="Проверка работоспособности сайтов (по расписанию)"
                  curl -s -X POST https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage \
                    -d chat_id=${{ secrets.CHAT_ID }} \
                    -d text="🚀 Workflow запущен.%0AЦель: $GREP%0ARun ID: ${{ github.run_id }}"

            - name: Checkout code and gh-pages
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  ref: main

            - name: Mark repository as safe
              run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

            - name: Download Allure history from gh-pages
              if: always()
              run: |
                  git fetch origin gh-pages || exit 0
                  if git show-ref --verify refs/remotes/origin/gh-pages; then
                    git worktree add --force gh-pages origin/gh-pages
                    mkdir -p allure-results/history
                    cp -r gh-pages/${{ env.REPORT_DATE }}/history/* allure-results/history/ || echo "No history found - first run?"
                  else
                    echo "No gh-pages branch found - first run?"
                  fi

            - name: Install dependencies and browsers
              run: |
                  npm ci
                  npx playwright install --with-deps
                  npm install -g allure-commandline

            - name: Capture job start time
              run: echo "job_started_at=$(TZ=\"Europe/Moscow\" date '+%d.%m.%Y %H:%M')" >> $GITHUB_ENV

            - name: Create Allure results directory
              run: mkdir -p allure-results

            - name: Set Allure environment and executor info
              run: |
                  mkdir -p allure-results

                  echo "{
                    \"Project\": \"Мониторинг сайтов\",
                    \"Environment\": \"Production\",
                    \"TestSuite\": \"Проверка работоспособности\",
                    \"CI\": \"GitHub Actions\",
                    \"OS\": \"${{ runner.os }}\",
                    \"Node.js\": \"$(node --version)\",
                    \"Playwright\": \"$(npx playwright --version)\",
                    \"Run ID\": \"${{ github.run_id }}\",
                    \"Commit\": \"${{ github.sha }}\"
                  }" > allure-results/environment.json

                  echo "{
                    \"name\": \"GitHub Actions\",
                    \"type\": \"github\",
                    \"url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                    \"buildOrder\": \"${{ github.run_id }}\",
                    \"buildName\": \"${{ github.workflow }} #${{ github.run_number }}\",
                    \"buildUrl\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                    \"reportUrl\": \"https://${{ github.repository_owner }}.github.io/${{ env.REPO_NAME }}/${{ env.REPORT_DATE }}/\",
                    \"reportName\": \"Allure Report\"
                  }" > allure-results/executor.json

            - name: Run tests
              run: |
                  set +e
                  grep_pattern="${{ github.event.inputs.grep }}"
                  [ -z "$grep_pattern" ] && grep_pattern="Проверка работоспособности сайтов"
                  echo "Using grep pattern: $grep_pattern"
                  npx playwright test --grep "$grep_pattern" --reporter=line,allure-playwright
                  tests_exit=$?
                  echo "tests_exit_code=$tests_exit" >> $GITHUB_ENV
                  if [ $tests_exit -ne 0 ]; then
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi
                  exit $tests_exit

            - name: Set up Java
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '17'

            - name: Generate Allure report with history
              if: always()
              run: |
                  REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ env.REPO_NAME }}/${{ env.REPORT_DATE }}/"
                  echo "REPORT_URL=${REPORT_URL}" >> $GITHUB_ENV
                  npx allure generate allure-results --clean -o allure-report \
                    --title "Отчёт мониторинга сайтов" \
                    --report-url ${REPORT_URL} \
                    --history-folder allure-results/history

            - name: Отправить статус в Telegram
              if: always()
              run: |
                  STATUS="✅ Всё прошло успешно"
                  if [ "${{ job.status }}" != "success" ]; then
                    STATUS="❌ Проверка прошла с ошибками"
                  fi

                  curl -s -X POST https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage \
                    -d chat_id=${{ secrets.CHAT_ID }} \
                    -d text="${STATUS}%0AЦель: ${{ github.event.inputs.grep }}%0AОтчёт: ${{ env.REPORT_URL }}"

            - name: Copy history for gh-pages
              if: always()
              run: |
                  mkdir -p allure-report/history
                  cp -r allure-results/history/* allure-report/history/ || echo "No history to copy"

            - name: Verify report generation
              if: always()
              run: |
                  if [ ! -d "./allure-report" ]; then
                    echo "::error::Allure report generation failed!"
                    echo "job_status=С ошибками" >> $GITHUB_ENV
                    echo "job_emoji=❌" >> $GITHUB_ENV
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi

            - name: Clean up gh-pages - keep only last 7 days
              if: always()
              run: |
                  if [ -d gh-pages ]; then
                    cd gh-pages || exit 1
                    echo "Before cleanup:"
                    find . -mindepth 1 -maxdepth 1

                    today=$(date +%s)

                    for entry in *; do
                      if [ -d "$entry" ]; then
                        if echo "$entry" | grep -Eq '^20[0-9]{2}-[0-9]{2}-[0-9]{2}$'; then
                          dir_seconds=$(date -d "$entry" +%s 2>/dev/null || echo 0)
                          if [ "$dir_seconds" -eq 0 ]; then
                            echo "Invalid date folder name $entry — deleting"
                            rm -rf "$entry"
                            continue
                          fi
                          age_days=$(( (today - dir_seconds) / 86400 ))
                          if [ "$age_days" -gt 7 ]; then
                            echo "Deleting report folder $entry (older than 7 days)"
                            rm -rf "$entry"
                          else
                            echo "Keeping report folder $entry"
                          fi
                        else
                          echo "Deleting non-report folder: $entry"
                          rm -rf "$entry"
                        fi
                      else
                        echo "Deleting file: $entry"
                        rm -f "$entry"
                      fi
                    done

                    echo "After cleanup:"
                    find . -mindepth 1 -maxdepth 1
                    cd ..
                  else
                    echo "gh-pages directory not found — nothing to clean"
                  fi

            - name: Commit and push cleanup to gh-pages
              if: always()
              run: |
                  if [ -d gh-pages ]; then
                    cd gh-pages
                    git config user.name "GitHub Actions"
                    git config user.email "actions@github.com"
                    git add -A
                    git commit -m "🧹 Cleanup old reports (older than 7 days)" || echo "No changes to commit"
                    git push origin HEAD:gh-pages
                  fi

            - name: Save test status to report directory
              if: always()
              run: echo "${{ env.tests_exit_code }}" > allure-report/status.txt

            - name: Ensure gh-pages branch exists
              run: |
                  if ! git ls-remote --exit-code --heads origin gh-pages; then
                    echo "gh-pages branch doesn't exist. Creating..."
                    git checkout --orphan gh-pages
                    git rm -rf .
                    echo "<!doctype html><title>GitHub Pages</title>" > index.html
                    git add index.html
                    git commit -m "Initialize gh-pages"
                    git push origin gh-pages
                  else
                    echo "gh-pages branch already exists."
                  fi

            - name: Deploy dated report to GitHub Pages
              if: always()
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./allure-report
                  destination_dir: ${{ env.REPORT_DATE }}
                  user_name: github-actions
                  user_email: github-actions@github.com

            - name: Set job conclusion
              if: always()
              run: |
                  if [ "${{ env.job_exit_code }}" != "0" ]; then
                    echo "conclusion=failure" >> "$GITHUB_OUTPUT"
                    exit 1
                  else
                    echo "conclusion=success" >> "$GITHUB_OUTPUT"
                  fi
