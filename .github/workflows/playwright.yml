name: Playwright Tests - Stable Version

on:
    schedule:
        - cron: '0 6 * * *'
    workflow_dispatch:
    push:
        branches: ['**']

jobs:
    run_tests:
        runs-on: ubuntu-latest
        container:
            image: mcr.microsoft.com/playwright:v1.51.1

        steps:
            # 1. Проверка кода (используем v3 для совместимости)
            - name: Checkout code
              uses: actions/checkout@v3

            # 2. Используем Node.js из контейнера Playwright
            - name: Verify Node.js
              run: |
                  echo "Node.js version: $(node --version)"
                  echo "npm version: $(npm --version)"

            # 3. Установка зависимостей (без apt-get)
            - name: Install dependencies
              run: |
                  # Чистая установка через npm из контейнера
                  npm install --no-audit --fund false --progress false
                  npx playwright install --with-deps

            # 4. Поиск теста перед запуском
            - name: Find test file
              id: find_test
              run: |
                  TEST_FILE=$(grep -rl "Проверка работоспособности сайта 1tm.ru" . || echo "")
                  if [ -z "$TEST_FILE" ]; then
                    echo "::error::Тест не найден в проекте"
                    echo "::set-output name=test_exists::false"
                    exit 1
                  else
                    echo "Тест найден в файле: $TEST_FILE"
                    echo "::set-output name=test_exists::true"
                    echo "::set-output name=test_file::$TEST_FILE"
                  fi

            # 5. Запуск теста с явным указанием файла
            - name: Run specific test
              if: steps.find_test.outputs.test_exists == 'true'
              run: |
                  npx playwright test \
                    ${{ steps.find_test.outputs.test_file }} \
                    --grep "Проверка работоспособности сайта 1tm.ru" \
                    --reporter=html,line \
                    --output=playwright-report \
                    --workers=1 \
                    --timeout=60000

            # 6. Проверка и упаковка отчёта
            - name: Prepare report
              if: always()
              run: |
                  if [ -d "playwright-report" ]; then
                    echo "Отчёт найден в playwright-report/"
                    cd playwright-report && zip -r ../report.zip .
                  else
                    echo "::error::Отчёт не сгенерирован!"
                    echo "Содержимое рабочей директории:"
                    ls -la
                    exit 1
                  fi

            # 7. Загрузка через API GitHub
            - name: Upload report
              if: always()
              run: |
                  if [ -f "report.zip" ]; then
                    curl -X POST \
                      -H "Authorization: Bearer ${{ github.token }}" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -H "Content-Type: application/zip" \
                      --data-binary @report.zip \
                      "https://uploads.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts?name=playwright-report"
                  else
                    echo "::error::Файл отчёта не найден"
                    exit 1
                  fi

            # 8. Информация о результате
            - name: Show results
              if: always()
              run: |
                  echo "Тесты завершены со статусом: ${{ job.status }}"
                  echo "Ссылка на артефакты:"
                  echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
