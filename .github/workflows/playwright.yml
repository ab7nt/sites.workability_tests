name: Sites workability checking with Allure report on GitHub Pages

on:
    schedule:
        - cron: '0 6 * * *'
    workflow_dispatch:

jobs:
    check_sites_workability:
        runs-on: ubuntu-latest
        container:
            image: mcr.microsoft.com/playwright:v1.52.0-noble

        steps:
            - name: Initialize variables
              run: |
                  echo "job_status=–£—Å–ø–µ—à–Ω–æ" >> $GITHUB_ENV
                  echo "job_emoji=‚úÖ" >> $GITHUB_ENV
                  echo "tests_exit_code=0" >> $GITHUB_ENV
                  echo "job_exit_code=0" >> $GITHUB_ENV
                  echo "REPORT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

            - name: Checkout code and gh-pages
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  ref: main

            - name: Download Allure history from gh-pages
              if: always()
              run: |
                  git fetch origin gh-pages || exit 0
                  if git show-ref --verify refs/remotes/origin/gh-pages; then
                    git worktree add --force gh-pages origin/gh-pages
                    mkdir -p allure-results/history
                    cp -r gh-pages/${{ env.REPORT_DATE }}/history/* allure-results/history/ || echo "No history found - first run?"
                  else
                    echo "No gh-pages branch found - first run?"
                  fi

            - name: Install Java and dependencies
              if: always()
              run: |
                  apt-get update && apt-get install -y openjdk-17-jre
                  java -version
                  npm install
                  npm install -D allure-playwright @playwright/test allure-commandline

            - name: Capture job start time
              run: echo "job_started_at=$(TZ="Europe/Moscow" date '+%d.%m.%Y %H:%M')" >> $GITHUB_ENV

            - name: Create Allure results directory
              run: mkdir -p allure-results

            - name: Set Allure environment and executor info
              run: |
                  echo '{
                    "Project": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤",
                    "Environment": "Production",
                    "TestSuite": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
                    "CI": "GitHub Actions",
                    "OS": "${{ runner.os }}",
                    "Node.js": "$(node --version)",
                    "Playwright": "$(npx playwright --version)",
                    "Run ID": "${{ github.run_id }}",
                    "Commit": "${{ github.sha }}"
                  }' > allure-results/environment.json

                  echo '{
                    "name": "GitHub Actions",
                    "type": "github",
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "buildOrder": "${{ github.run_id }}",
                    "buildName": "${{ github.workflow }} #${{ github.run_number }}",
                    "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "reportUrl": "https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/${{ env.REPORT_DATE }}/",
                    "reportName": "Allure Report"
                  }' > allure-results/executor.json

            - name: Run tests
              run: |
                  set +e
                  npx playwright test --grep '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤' --reporter=line,allure-playwright
                  tests_exit=$?
                  echo "tests_exit_code=$tests_exit" >> $GITHUB_ENV
                  if [ $tests_exit -ne 0 ]; then
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi
                  exit $tests_exit

            - name: Generate Allure report with history
              if: always()
              run: |
                  REPORT_URL="https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/${{ env.REPORT_DATE }}/"
                  echo "REPORT_URL=${REPORT_URL}" >> $GITHUB_ENV
                  npx allure generate allure-results --clean -o allure-report \
                    --title "–û—Ç—á—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤" \
                    --report-url ${REPORT_URL} \
                    --history-folder allure-results/history

            - name: Copy history for gh-pages
              if: always()
              run: |
                  mkdir -p allure-report/history
                  cp -r allure-results/history/* allure-report/history/ || echo "No history to copy"

            - name: Verify report generation
              if: always()
              run: |
                  if [ ! -d "./allure-report" ]; then
                    echo "::error::Allure report generation failed!"
                    echo "job_status=–° –æ—à–∏–±–∫–∞–º–∏" >> $GITHUB_ENV
                    echo "job_emoji=‚ùå" >> $GITHUB_ENV
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi

            - name: Deploy dated report to GitHub Pages
              if: always()
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./allure-report
                  publish_branch: gh-pages
                  destination_dir: ${{ env.REPORT_DATE }}
                  force_orphan: false
                  keep_files: true
                  user_name: 'GitHub Actions'
                  user_email: 'actions@github.com'

            - name: Collect last 7 report links
              if: always()
              run: |
                  git fetch origin gh-pages
                  git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }} gh-pages-clone

                  if [ -d gh-pages-clone ]; then
                    {
                      echo "üìÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á—ë—Ç—ã –∑–∞ 7 –¥–Ω–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å):"
                      for d in $(ls -d gh-pages-clone/20*/ | sed 's|gh-pages-clone/||' | sort -r | grep -v "${{ env.REPORT_DATE }}" | head -n 7); do
                        echo "- https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/$d"
                      done
                    } > past_reports.txt
                  else
                    echo "üìÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á—ë—Ç—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (gh-pages –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)" > past_reports.txt
                  fi

            - name: Update job status
              if: always()
              run: |
                  if [ ${{ env.job_exit_code }} -ne 0 ] || [ ${{ env.tests_exit_code }} -ne 0 ]; then
                    echo "job_status=–° –æ—à–∏–±–∫–∞–º–∏" >> $GITHUB_ENV
                    echo "job_emoji=‚ùå" >> $GITHUB_ENV
                  fi
                  if [[ "${{ job.status }}" == "cancelled" ]]; then
                    echo "job_status=–û—Ç–º–µ–Ω–µ–Ω" >> $GITHUB_ENV
                    echo "job_emoji=üö´" >> $GITHUB_ENV
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi

            - name: Prepare notification
              if: always()
              run: |
                  echo "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤: ${{ env.job_emoji }} ${{ env.job_status }}" > email_body.txt
                  echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${{ env.job_started_at }}" >> email_body.txt
                  echo "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç: ${{ env.REPORT_URL }}" >> email_body.txt
                  echo "" >> email_body.txt
                  echo "üìÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç—á—ë—Ç—ã –∑–∞ 7 –¥–Ω–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å):" >> email_body.txt
                  if [ -f past_reports.txt ]; then
                    cat past_reports.txt >> email_body.txt
                  else
                    echo "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã" >> email_body.txt
                  fi
                  echo "" >> email_body.txt
                  if [ "${{ env.tests_exit_code }}" != "0" ]; then
                    echo "‚ö†Ô∏è –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: ${{ env.tests_exit_code }})" >> email_body.txt
                  fi
                  if [ "${{ env.job_exit_code }}" != "0" ]; then
                    echo "‚ùå Job –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: ${{ env.job_exit_code }})" >> email_body.txt
                  fi
                  if [ "${{ job.status }}" = "cancelled" ]; then
                    echo "üö´ Job –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π" >> email_body.txt
                  fi

                  echo "email_body<<EOF" >> $GITHUB_ENV
                  cat email_body.txt >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Send email notification
              if: always()
              uses: dawidd6/action-send-mail@v3
              with:
                  server_address: smtp.yandex.ru
                  server_port: 587
                  username: ${{ secrets.EMAIL_USERNAME }}
                  password: ${{ secrets.EMAIL_PASSWORD }}
                  subject: '${{ env.job_emoji }} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤ (run_id:${{ github.run_id }})'
                  body: ${{ env.email_body }}
                  to: ${{ secrets.EMAIL_RECIPIENTS }}
                  from: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤'

            - name: Force fail job if needed
              if: ${{ env.job_exit_code != 0 || env.tests_exit_code != 0 }}
              run: |
                  echo "Job –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${{ env.job_status }}"
                  echo "–ö–æ–¥ —Ç–µ—Å—Ç–æ–≤: ${{ env.tests_exit_code }}"
                  echo "–ö–æ–¥ job: ${{ env.job_exit_code }}"
                  exit 1
