name: Sites workability checking with Allure report on GitHub Pages

on:
    schedule:
        - cron: '0 6 * * *'
    workflow_dispatch:
        inputs:
            grep:
                description: 'Grep pattern for Playwright tests'
                required: false
                default: 'Проверка работоспособности сайтов'

jobs:
    check_sites_workability:
        runs-on: ubuntu-latest
        container:
            image: mcr.microsoft.com/playwright:v1.52.0-noble
        env:
            TZ: Europe/Moscow

        steps:
            - name: Initialize variables
              run: |
                  echo "job_status=Успешно" >> $GITHUB_ENV
                  echo "job_emoji=✅" >> $GITHUB_ENV
                  echo "tests_exit_code=0" >> $GITHUB_ENV
                  echo "job_exit_code=0" >> $GITHUB_ENV
                  echo "REPORT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

            - name: Notify about workflow start
              run: |
                  GREP="${{ github.event.inputs.grep }}"
                  [ -z "$GREP" ] && GREP="Проверка работоспособности сайтов (по расписанию)"  # fallback для cron-запуска
                  curl -s -X POST https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage \
                    -d chat_id=${{ secrets.CHAT_ID }} \
                    -d text="🚀 Workflow запущен.%0AЦель: $GREP%0ARun ID: ${{ github.run_id }}"

            - name: Checkout code and gh-pages
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
                  ref: main

            - name: Mark repository as safe
              run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

            - name: Download Allure history from gh-pages
              if: always()
              run: |
                  git fetch origin gh-pages || exit 0
                  if git show-ref --verify refs/remotes/origin/gh-pages; then
                    git worktree add --force gh-pages origin/gh-pages
                    mkdir -p allure-results/history
                    cp -r gh-pages/${{ env.REPORT_DATE }}/history/* allure-results/history/ || echo "No history found - first run?"
                  else
                    echo "No gh-pages branch found - first run?"
                  fi

            - name: Install Java and dependencies
              if: always()
              run: |
                  apt-get update && apt-get install -y openjdk-17-jre
                  java -version
                  npm install
                  npm install -D allure-playwright @playwright/test allure-commandline

            - name: Capture job start time
              run: echo "job_started_at=$(TZ=\"Europe/Moscow\" date '+%d.%m.%Y %H:%M')" >> $GITHUB_ENV

            - name: Create Allure results directory
              run: mkdir -p allure-results

            - name: Set Allure environment and executor info
              run: |
                  echo '{
                    "Project": "Мониторинг сайтов",
                    "Environment": "Production",
                    "TestSuite": "Проверка работоспособности",
                    "CI": "GitHub Actions",
                    "OS": "${{ runner.os }}",
                    "Node.js": "$(node --version)",
                    "Playwright": "$(npx playwright --version)",
                    "Run ID": "${{ github.run_id }}",
                    "Commit": "${{ github.sha }}"
                  }' > allure-results/environment.json

                  echo '{
                    "name": "GitHub Actions",
                    "type": "github",
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "buildOrder": "${{ github.run_id }}",
                    "buildName": "${{ github.workflow }} #${{ github.run_number }}",
                    "buildUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "reportUrl": "https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/${{ env.REPORT_DATE }}/",
                    "reportName": "Allure Report"
                  }' > allure-results/executor.json

            - name: Run tests
              run: |
                  set +e
                  grep_pattern="${{ github.event.inputs.grep }}"
                  [ -z "$grep_pattern" ] && grep_pattern="Проверка работоспособности сайтов"
                  echo "Using grep pattern: $grep_pattern"
                  npx playwright test --grep "$grep_pattern" --reporter=line,allure-playwright
                  tests_exit=$?
                  echo "tests_exit_code=$tests_exit" >> $GITHUB_ENV
                  if [ $tests_exit -ne 0 ]; then
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi
                  exit $tests_exit

            - name: Generate Allure report with history
              if: always()
              run: |
                  REPORT_URL="https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/${{ env.REPORT_DATE }}/"
                  echo "REPORT_URL=${REPORT_URL}" >> $GITHUB_ENV
                  npx allure generate allure-results --clean -o allure-report \
                    --title "Отчёт мониторинга сайтов" \
                    --report-url ${REPORT_URL} \
                    --history-folder allure-results/history

            - name: Отправить статус в Telegram
              if: always()
              run: |
                  STATUS="✅ Всё прошло успешно"
                  if [ "${{ job.status }}" != "success" ]; then
                    STATUS="❌ Проверка прошла с ошибками"
                  fi

                  curl -s -X POST https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage \
                    -d chat_id=${{ secrets.CHAT_ID }} \
                    -d text="${STATUS}%0AЦель: ${{ github.event.inputs.grep }}%0AОтчёт: ${{ env.REPORT_URL }}"

            - name: Copy history for gh-pages
              if: always()
              run: |
                  mkdir -p allure-report/history
                  cp -r allure-results/history/* allure-report/history/ || echo "No history to copy"

            - name: Verify report generation
              if: always()
              run: |
                  if [ ! -d "./allure-report" ]; then
                    echo "::error::Allure report generation failed!"
                    echo "job_status=С ошибками" >> $GITHUB_ENV
                    echo "job_emoji=❌" >> $GITHUB_ENV
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi

            - name: Clean up reports older than 7 days
              if: always()
              run: |
                  if [ -d gh-pages ]; then
                    cd gh-pages
                    echo "Before cleanup:"
                    ls -1d 20*/ | sort

                    # Get today's date in seconds
                    today=$(date +%s)

                    for dir in 20*/; do
                      dir_date=$(basename "$dir")
                      # Skip if not in YYYY-MM-DD format
                      if [[ "$dir_date" =~ ^20[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]]; then
                        # Convert dir date to seconds
                        dir_seconds=$(date -d "$dir_date" +%s || echo 0)
                        age_days=$(( (today - dir_seconds) / 86400 ))
                        if [ "$age_days" -gt 7 ]; then
                          echo "Deleting $dir (older than 7 days)"
                          rm -rf "$dir"
                        fi
                      else
                        echo "Skipping $dir (invalid date format)"
                      fi
                    done

                    echo "After cleanup:"
                    ls -1d 20*/ | sort
                    cd ..
                  else
                    echo "gh-pages directory not found — nothing to clean"
                  fi

            - name: Save test status to report directory
              if: always()
              run: echo "${{ env.tests_exit_code }}" > allure-report/status.txt

            - name: Deploy dated report to GitHub Pages
              if: always()
              uses: peaceiris/actions-gh-pages@v3
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: ./allure-report
                  publish_branch: gh-pages
                  destination_dir: ${{ env.REPORT_DATE }}
                  force_orphan: false
                  keep_files: false
                  user_name: 'GitHub Actions'
                  user_email: 'actions@github.com'

            - name: Collect last 7 report links with status
              if: always()
              run: |
                  if [ -d gh-pages ]; then
                    {
                      echo "past_reports_list<<EOF"
                      for d in $(ls -d gh-pages/20*/ | sed 's|gh-pages/||' | sort -r | grep -v "${{ env.REPORT_DATE }}" | head -n 7); do
                        emoji="❓"
                        if [ -f gh-pages/$d/status.txt ]; then
                          code=$(cat gh-pages/$d/status.txt)
                          if [ "$code" -eq 0 ]; then emoji="✅"; else emoji="❌"; fi
                        fi
                        echo "$emoji https://${{ github.repository_owner }}.github.io/${GITHUB_REPOSITORY#*/}/$d"
                      done
                      echo "EOF"
                    } >> $GITHUB_ENV
                  else
                    echo "past_reports_list<<EOF" >> $GITHUB_ENV
                    echo "не найдены" >> $GITHUB_ENV
                    echo "EOF" >> $GITHUB_ENV
                  fi

            - name: Save status.txt to gh-pages
              if: always()
              run: |
                  echo "${{ env.job_exit_code }}" > status.txt
                  mv status.txt allure-report/

            - name: Update job status
              if: always()
              run: |
                  if [ ${{ env.job_exit_code }} -ne 0 ] || [ ${{ env.tests_exit_code }} -ne 0 ]; then
                    echo "job_status=С ошибками" >> $GITHUB_ENV
                    echo "job_emoji=❌" >> $GITHUB_ENV
                  fi
                  if [[ "${{ job.status }}" == "cancelled" ]]; then
                    echo "job_status=Отменен" >> $GITHUB_ENV
                    echo "job_emoji=🚫" >> $GITHUB_ENV
                    echo "job_exit_code=1" >> $GITHUB_ENV
                  fi

            - name: Prepare notification
              if: always()
              run: |
                  {
                    echo "email_body<<EOF"
                    echo " Результат проверки работоспособности сайтов: ${{ env.job_emoji }} ${{ env.job_status }}"
                    echo "Время запуска: ${{ env.job_started_at }}"
                    echo "Ссылка на отчёт:"
                    echo "${{ env.REPORT_URL }}"
                    echo ""
                    echo "📂 Предыдущие отчёты за 7 дней:"
                    echo "${{ env.past_reports_list }}"
                    if [ ${{ env.tests_exit_code }} -ne 0 ]; then
                      echo "Тесты завершились с ошибками (код: ${{ env.tests_exit_code }})"
                    fi
                    if [ ${{ env.job_exit_code }} -ne 0 ]; then
                      echo "Job завершился с ошибками (код: ${{ env.job_exit_code }})"
                    fi
                    if [[ "${{ job.status }}" == "cancelled" ]]; then
                      echo "Job был отменен вручную или системой"
                    fi
                    echo "EOF"
                  } >> $GITHUB_ENV

            - name: Send email notification
              if: always()
              uses: dawidd6/action-send-mail@v3
              with:
                  server_address: smtp.yandex.ru
                  server_port: 587
                  username: ${{ secrets.EMAIL_USERNAME }}
                  password: ${{ secrets.EMAIL_PASSWORD }}
                  subject: '${{ env.job_emoji }} Результат проверки работоспособности сайтов (run_id:${{ github.run_id }})'
                  body: ${{ env.email_body }}
                  to: ${{ secrets.EMAIL_RECIPIENTS }}
                  from: 'Автоматическое тестирование работоспособности сайтов'

            - name: Force fail job if needed
              if: ${{ env.job_exit_code != 0 || env.tests_exit_code != 0 }}
              run: |
                  echo "Job завершен со статусом: ${{ env.job_status }}"
                  echo "Код тестов: ${{ env.tests_exit_code }}"
                  echo "Код job: ${{ env.job_exit_code }}"
                  exit 1
